$radius: 400px;
$dotSize: 20px;
$spokesNum: 36;
$planesNum: 12;

@function unit($num, $unit: px) {
  $result: $num;
  @if ($unit && $unit != px) {
    $result: $num + $unit;
  }

  @return $result;
}

.main-wrapper {
  display: flex;
  position: absolute;
  transform-style: preserve-3d;
  perspective: 400px;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
  align-items: center;
  justify-content: center;
  transform: rotate(90deg);
}

.sphere-wrapper {
  transform-style: preserve-3d;
  width: $radius;
  height: $radius;
  position: relative;
  animation: rotate3d 25s linear infinite;
}

.plane {
  position: absolute;
  transform-style: preserve-3d;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  border-radius: 50%;
}

.spoke {
  transform-origin: 0 0;
  transform-style: preserve-3d;
  position: absolute;
  left: 50%;
  top: 50%;
  height: $radius/2.2;
  width: 0px;
}

.dot {
  position: absolute;
  width: $dotSize;
  height: $dotSize;
  line-height: $dotSize;
  border-radius: 50%;
  left: -$dotSize/2;
  top: 100%;
  color: #333;
  font-weight: 900;
  text-align: center;
}

@mixin place-spokes($spokes: $spokesNum, $i: 1) {
  @if ($i < $spokes) {
    $currDeg: unit((360 / $spokes * $i), deg);
    .spoke.spoke-#{$i} {
      transform: rotateZ($currDeg);
    }
    @include place-spokes($spokes, $i + 1);
  }
}

@mixin place-planes($planes: $planesNum, $i: 1) {
  @if ($i < $planes) {
    $currDeg: unit(180 / $planes * $i, deg);
    .plane.plane-#{$i} {
      transform: rotateY($currDeg);
    }
    @include place-planes($planes, $i + 1);
  }
}

@mixin animate-dots($spokes: $spokesNum/2, $i: 0) {
  @if ($i <= $spokes) {
    $delay: unit($i/$spokes, s);
    $j: $spokesNum - $i;
    $colorDeg: (360 / $spokesNum * $i);

    .spoke-#{$i} .dot,
    .spoke-#{$j} .dot {
      animation: pulsate 0.5s infinite $delay alternate both;
      background-color: adjust-hue(#ff6600, $colorDeg);
    }

    .spoke-#{$j} .dot {
      animation: pulsateRev 0.5s infinite $delay alternate both;
    }

    @include animate-dots($spokes, $i + 1);
  }
}

@include place-spokes();
@include place-planes();
@include animate-dots();

@keyframes rotate3d {
  0% {
    transform: rotate3d(0, 1, 0, 0deg);
  }
  25% {
    transform: rotate3d(0, 1, 0, 90deg);
  }
  50% {
    transform: rotate3d(0, 1, 0, 180deg);
  }
  75% {
    transform: rotate3d(0, 1, 0, 270deg);
  }
  100% {
    transform: rotate3d(0, 1, 0, 360deg);
  }
}

@keyframes pulsate {
  0% {
    transform: rotateX(90deg) scale(0.3) translateZ(20px) scaleX(-1);
  }
  100% {
    transform: rotateX(90deg) scale(1) translateZ(0px) scaleX(-1);
  }
}

@keyframes pulsateRev {
  0% {
    transform: rotateX(90deg) scale(0.3) translateZ(20px) scaleX(-1)
      rotate(180deg);
  }
  100% {
    transform: rotateX(90deg) scale(1) translateZ(0px) scaleX(-1) rotate(180deg);
  }
}
